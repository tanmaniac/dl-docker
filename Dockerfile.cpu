FROM ubuntu:16.04

MAINTAINER Tanmay Bangalore <tanmaybangalore@gmail.com>

ARG THEANO_VERSION=rel-1.0.2
ARG TENSORFLOW_VERSION=1.8.0
ARG KERAS_VERSION=2.1.6
ARG LASAGNE_VERSION=v0.1
ARG TORCH_VERSION=latest
ARG CAFFE_VERSION=master
ARG OPENCV_VERSION=3.4.1

# Install dependencies for Tensorflow, OpenCV 3, and Caffe, along with TensorRT
RUN apt-get update && apt-get install -y sudo python-pip python-dev python3-pip python3-dev \
	wget apt-utils && \
	pip3 install --upgrade pip && \
	\
	apt-get install -y build-essential checkinstall cmake pkg-config yasm git \
	gfortran libjpeg8-dev libjasper-dev libpng12-dev libtiff5-dev libavcodec-dev libavformat-dev \
	libswscale-dev libdc1394-22-dev libxine2-dev libv4l-dev libgstreamer0.10-dev \
	libgstreamer-plugins-base0.10-dev qt5-default libgtk2.0-dev libtbb-dev libatlas-base-dev \
	libfaac-dev libmp3lame-dev libtheora-dev libvorbis-dev libxvidcore-dev libopencore-amrnb-dev \
	libopencore-amrwb-dev x264 v4l-utils libprotobuf-dev protobuf-compiler libgoogle-glog-dev \
	libgflags-dev libgphoto2-dev libeigen3-dev libhdf5-dev doxygen && \
	\
	apt-get install -y libleveldb-dev libsnappy-dev libhdf5-serial-dev liblmdb-dev && \
	apt-get install -y --no-install-recommends libboost-all-dev libboost-python-dev python-skimage \
	python-protobuf python-openssl libssl-dev && \
	apt-get clean && apt-get autoremove && rm -rf /var/lib/apt/lists/*

RUN pip3 --no-cache-dir install --upgrade \
	https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-${TENSORFLOW_VERSION}-cp35-cp35m-linux_x86_64.whl

# Fetch OpenCV and 3rd party modules and build
RUN cd /opt && wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz && \
	mkdir opencv && tar -xf ${OPENCV_VERSION}.tar.gz -C opencv --strip-components 1 && \
	rm -f ${OPENCV_VERSION}.tar.gz && \
	wget https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.tar.gz && \
	mkdir opencv_contrib && tar -xf ${OPENCV_VERSION}.tar.gz -C opencv_contrib --strip-components 1 && \
	rm -f ${OPENCV_VERSION}.tar.gz && \
	\
	cd /opt/opencv && mkdir release && cd release && \
	cmake -G "Unix Makefiles" -DENABLE_PRECOMPILED_HEADERS=OFF -DCMAKE_CXX_COMPILER=/usr/bin/g++ \
	CMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local \
	-DWITH_TBB=ON -DBUILD_NEW_PYTHON_SUPPORT=ON -DWITH_V4L=ON -DINSTALL_C_EXAMPLES=ON \
	-DINSTALL_PYTHON_EXAMPLES=ON -DBUILD_EXAMPLES=OFF -DWITH_QT=ON -DWITH_OPENGL=ON \
	-DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
	.. &&\
	make -j"$(nproc)"  && \
	make install && \
	ldconfig &&\
	cd /opt/opencv/release && make clean

# Set up Caffe environment variables
ENV CAFFE_ROOT=/opt/caffe \
	PYCAFFE_ROOT=$CAFFE_ROOT/python \
	PYTHONPATH=$PYCAFFE_ROOT:$PYTHONPATH \
	PATH=$CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH

# Install Caffe
RUN git clone -b ${CAFFE_VERSION} --depth 1 https://github.com/BVLC/caffe.git /opt/caffe && \
	cd /opt/caffe && \
	pip install --upgrade python-dateutil && \
	cat python/requirements.txt | xargs -n1 pip install && \
	mkdir build && cd build && \
	cmake .. && \
	make -j"$(nproc)" all && \
	make install && make clean && \
	echo "$CAFFE_ROOT/build/lib" >> /etc/ld.so.conf.d/caffe.conf && ldconfig

# Install Theano and set up Theano config (.theanorc) for CUDA and OpenBLAS
RUN pip --no-cache-dir install git+git://github.com/Theano/Theano.git@${THEANO_VERSION} && \
	\
	echo "[global]\ndevice=cpu\nfloatX=float32\nmode=FAST_RUN \
	\n[lib]\ncnmem=0.95 \
	\n[nvcc]\nfastmath=True \
	\n[blas]\nldflag = -L/usr/lib/openblas-base -lopenblas \
	\n[DebugMode]\ncheck_finite=1" \
	> /opt/.theanorc

# Install Keras
RUN pip --no-cache-dir install git+git://github.com/fchollet/keras.git@${KERAS_VERSION}

# Install Lasagne
RUN pip install --upgrade https://github.com/Lasagne/Lasagne/archive/master.zip

# Install Torch
RUN git clone https://github.com/torch/distro.git /opt/torch --recursive && \
	cd /opt/torch && \
	bash install-deps && \
	yes no | ./install.sh && \
	apt-get clean && apt-get autoremove && rm -rf /var/lib/apt/lists/*

# Export the LUA evironment variables manually
ENV LUA_PATH='/opt/.luarocks/share/lua/5.1/?.lua;/opt/.luarocks/share/lua/5.1/?/init.lua;/opt/torch/install/share/lua/5.1/?.lua;/opt/torch/install/share/lua/5.1/?/init.lua;./?.lua;/opt/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua' \
	LUA_CPATH='/opt/.luarocks/lib/lua/5.1/?.so;/opt/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so' \
	PATH=/opt/torch/install/bin:$PATH \
	LD_LIBRARY_PATH=/opt/torch/install/lib:$LD_LIBRARY_PATH \
	DYLD_LIBRARY_PATH=/opt/torch/install/lib:$DYLD_LIBRARY_PATH \
	LUA_CPATH='/opt/torch/install/lib/?.so;'$LUA_CPATH

# Install the latest versions of nn, and iTorch
RUN luarocks install nn && \
	luarocks install loadcaffe && \
	\
	cd /opt && git clone https://github.com/facebook/iTorch.git && \
	cd iTorch && \
	luarocks make

RUN pip --no-cache-dir install --upgrade ipython ipykernel jupyter
# Set up notebook config
COPY jupyter_notebook_config.py /root/.jupyter/

# Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062
COPY run_jupyter.sh /root/

# Expose Ports for TensorBoard (6006), Ipython (8888)
EXPOSE 6006 8888

WORKDIR "/root"
CMD ["/bin/bash"]
